#!/usr/bin/env python

import os
import sys
import time
import inspect
import threading
import Queue
import telnetlib
import socket

#import graphitestat

PORT=2013
GRAPHITELB="graphite.example.com"
COLLECTORS_PATH="/etc/graphite-collectors"


#-----------------------------------------------------------------------------#
def load_collectors(metric_queue):
	collectors = {}
	sys.path.append(COLLECTORS_PATH)
	for file in os.listdir(COLLECTORS_PATH):
		if file[-3:] == '.py':
			modname = file[:-3]
			_imp_mod = __import__(modname, globals={"__name__":__name__})
			#for attr in dir(_imp_mod):
			if modname in dir(_imp_mod):
				cls = getattr(sys.modules[modname], modname)
				if not inspect.isclass(cls):
					raise TypeError("%s is not a class in %s" % (cls,modname))
				collectors[cls.__name__] = cls

				if "interval" in dir(_imp_mod):
					cls(metric_queue,interval=_imp_mod.interval)
				else:
					cls(metric_queue)

	return collectors
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
class metrics_sender(threading.Thread):
	def __init__(self, queue):
		self.queue = queue
		threading.Thread.__init__(self)
		self.socket = None
		self.connect()

	def send(self,string):
		ntrys=0
		while True:
			ntrys+=1
			try:
				if ntrys > 5:
					print "to many fails while sending metrics"
					sys.exit(9)
				# TODO: replace this comment with 'debug' option
				# print ">>>",string
				self.socket.write(string + '\n')
				break
			except socket.error as e:
				print "problem while sending metrics:", e
				print "reconnecting"
				self.connect()
				continue
			except AttributeError as e:
				print "problem while sending metrics:", e
				print "reconnecting"
				self.connect()
				continue
	def run(self):
		while True:
			if self.queue.empty():
				time.sleep(1)
			else:
				string = self.queue.get()
				self.send(string)
				self.queue.task_done()

	def connect(self):
		try:
			if self.socket in [None,0,1]:
				self.socket = telnetlib.Telnet(GRAPHITELB, PORT)
			else:
				self.socket.close()

			self.socket.open(GRAPHITELB, PORT)
		except socket.error as e:
			print e
			sys.exit(8)
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
def main(argv):
	try:
		ready_metrics = Queue.Queue()
		sender = metrics_sender(ready_metrics)
		sender.setDaemon(True)
		sender.start()
		print "loading collectors"
		collectors = load_collectors(ready_metrics)
		print "loaded:", collectors.keys()

		while True:
			time.sleep(600)

	except KeyboardInterrupt:
		print("KeyboardInterrupt")
		sys.exit(5)
	except SystemExit:
		print("SystemExit")
		sys.exit(6)
	except Exception as e:
		print(e)
		sys.exi7(7)
#-----------------------------------------------------------------------------#


#-----------------------------------------------------------------------------#
if __name__ == '__main__':
	main(sys.argv)
#-----------------------------------------------------------------------------#
